import SimpleSchema from 'simpl-schema';
/**
 * Created by muralidhar on 18/02/17.
 */
import MlSchemas from '../../common/commonSchemas'

MlProcessMapping = new Mongo.Collection('mlProcessMapping');

MlProcessMappingSchema = new SimpleSchema({

    processId:{
        type:String,
        optional:false
    },
    process:{
        type:String,
        optional:false
    },
    identity:{
       type:String,
      optional:true
    },
    communities:{
      type:Array,
      optional:true
    },
    'communities.$':{
      type:String,
      optional:true
    },
    /*'communities.$.id':{
      type:String,
      optional:true
    },
    'communities.$.name':{
      type:String,
      optional:true
    },*/
    userTypes:{
      type:Array,
      optional:true
    },
  'userTypes.$':{
      type:String,
      optional:true
    },
    /*'userTypes.$.id':{
      type:String,
      optional:true
    },
    'userTypes.$.name':{
      type:String,
      optional:true
    },*/
    identities:{
      type:Array,
      optional:true
    },
    'identities.$':{
      type:Object,
      optional:true
    },
    'identities.$.id':{
      type:String,
      optional:true
    },
    'identities.$.name':{
      type:String,
      optional:true
    },
    industries:{
      type:Array,
      optional:true
    },
    'industries.$':{
      type:String,
      optional:true
    },
    /*'industries.$.id':{
      type:String,
      optional:true
    },*/
    professions:{
      type:Array,
      optional:true
    },
    'professions.$':{
      type:String,
      optional:true
    },
   /* 'professions.$.id':{
      type:String,
      optional:true
    },
    'professions.$.name':{
      type:String,
      optional:true
    },*/
    clusters:{
      type:Array,
      optional:true
    },
    'clusters.$':{
      type:String,
      optional:true
    },
   /* 'clusters.$.id':{
      type:String,
      optional:true
    },
    'clusters.$.name':{
      type:String,
      optional:true
    },*/
    states:{
      type:Array,
      optional:true
    },
    'states.$':{
      type:String,
      optional:true
    },
    /*'states.$.id':{
      type:String,
      optional:true
    },
    'states.$.name':{
      type:String,
      optional:true
    },*/
    chapters:{
      type:Array,
      optional:true
    },
    'chapters.$':{
      type:String,
      optional:true
    },
  /*  'chapters.$.id':{
      type:String,
      optional:true
    },
    'chapters.$.name':{
      type:String,
      optional:true
    },*/
    subChapters:{
      type:Array,
      optional:true
    },
    'subChapters.$':{
      type:String,
      optional:true
    },
    /*'subChapters.$.id':{
      type:String,
      optional:true
    },
    'subChapters.$.name':{
      type:String,
      optional:true
    },*/
  document:{
        type:Array,
        optional:true
    },
    'document.$':{
      type:Object,
      optional:true
    },
    'document.$.type':{
        type:String,
        optional:true
    },
    'document.$.category':{
      type:String,
      optional:true
    },
    'document.$.isActive':{
        type:Boolean,
        optional:true
    },
  processDocuments:{
    type:Array,
    optional:true
  },
  'processDocuments.$':{
    type:Object,
    optional:true
  },
  'processDocuments.$.kycCategoryId':{
    type:String,
    optional:true
  },
  'processDocuments.$.docTypeId':{
    type:String,
    optional:true
  },

  'processDocuments.$.mappedDocuments':{
    type:Array,
    optional:true
  },
  'processDocuments.$.mappedDocuments.$':{
    type:Object,
    optional:true
  },
  'processDocuments.$.mappedDocuments.$.mandatory':{
    type:String,
    optional:true
  },
  'processDocuments.$.mappedDocuments.$.isActive':{
    type:String,
    optional:true
  },
  'processDocuments.$.mappedDocuments.$.documentId':{
    type:String,
    optional:true
  },'processDocuments.$.mappedDocuments.$.documentName':{
    type:String,
    optional:true
  },
  'processDocuments.$.mappedDocuments.$.validity':{
    type:String,
    optional:true
  },

  'processDocuments.$.mappedDocuments.$.inputLength':{
    type:String,
    optional:true
  },
  'processDocuments.$.mappedDocuments.$.remarks':{
    type:String,
    optional:true
  },
  'processDocuments.$.mappedDocuments.$.allowableMaxSize':{
    type:String,
    optional:true
  },
  'processDocuments.$.mappedDocuments.$.issuingAuthority':{
    type:String,
    optional:true
  },
  'processDocuments.$.mappedDocuments.$.allowableFormat':{
    type:Array,
    optional:true
  },
  'processDocuments.$.mappedDocuments.$.allowableFormat.$':{
    type:String,
    optional:true
  },
  'processDocuments.$.mappedDocuments.$.clusters':{
    type:Array,
    optional:true
  },
  'processDocuments.$.mappedDocuments.$.clusters.$':{
    type:String,
    optional:true
  },
  'processDocuments.$.mappedDocuments.$.chapters':{
    type:Array,
    optional:true
  },
  'processDocuments.$.mappedDocuments.$.chapters.$':{
    type:String,
    optional:true
  },
  'processDocuments.$.mappedDocuments.$.subChapters':{
    type:Array,
    optional:true
  },
  'processDocuments.$.mappedDocuments.$.subChapters.$':{
    type:String,
    optional:true
  },
  'processDocuments.$.mappedDocuments.$.kycCategory':{
    type:Array,
    optional:true
  },
  'processDocuments.$.mappedDocuments.$.kycCategory.$':{
    type:String,
    optional:true
  },
  'processDocuments.$.mappedDocuments.$.documentType':{
    type:Array,
    optional:true
  },
  'processDocuments.$.mappedDocuments.$.documentType.$':{
    type:String,
    optional:true
  },

  isActive:{
      type:Boolean,
      optional:true
    }
})


MlProcessMapping.attachSchema(MlProcessMappingSchema);
MlSchemas["MlProcessMapping"] = MlProcessMappingSchema;
